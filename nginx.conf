# =================================================================
# ScienceOS-2API - 粘性会话与高性能 Nginx 配置
# 核心: 基于 Authorization 头实现粘性会话，确保流式响应的稳定性
# =================================================================

# --- 全局性能设置 ---
worker_processes auto;
worker_rlimit_nofile 102400;

# --- 事件模型优化 ---
events {
    worker_connections 102400;
    use epoll;
    multi_accept on;
}

# --- HTTP 核心配置 ---
http {
    # --- 基础性能优化 ---
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65s; # 延长 keepalive 时间以适应长轮询
    server_tokens off;
    access_log off; # 关闭日志以提升性能

    # --- 上游服务器组 (我们的 FastAPI 应用) ---
    upstream backend_servers {
        # 关键: 使用 Authorization 请求头进行哈希，实现“粘性会话”
        # 这确保了来自同一客户端（使用相同API Key）的所有请求都由同一个后端Worker处理，
        # 从根本上解决了流式输出在多Worker环境下的混乱问题。
        hash $http_authorization consistent;

        # 性能策略: 开启与后端的长连接池，减少连接开销
        keepalive 128;

        # 后端服务地址和端口 (与 docker-compose.yml 和 Dockerfile 对应)
        server scienceos-api:8080;
    }

    # --- 主服务器配置 (API 网关) ---
    server {
        listen 80;
        server_name _;

        location / {
            proxy_pass http://backend_servers;

            # --- 流式传输终极优化 ---
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off; # 立即发送请求体

            # --- 协议与头信息设置 ---
            proxy_http_version 1.1;
            proxy_set_header Connection ""; # 清除 Connection 头，以支持 keepalive
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
